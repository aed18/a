#include <iostream>
#include <deque>
#include <vector>
using namespace std;
template <class T>
class CMaxHeap3
{
public:
    void push(int n);
    int top();
    void pop();
    void print();
private:
    std::deque<T> heap;
    void reorg_arr(int indice);
    void reorg_aba(int indice);
};

template <class T>
int CMaxHeap3<T>::top()
{
    if (!heap.empty()) {
        return heap.front();
    }
    return -1; // Si el heap está vacío
}

template <class T>
void CMaxHeap3<T>::push(int x)
{
    heap.push_back(x);
    reorg_arr(heap.size() - 1);
}

template <class T>
void CMaxHeap3<T>::pop()
{
    if (heap.empty()) return;
    heap[0] = heap.back();
    heap.pop_back();
    if (!heap.empty()) {
        reorg_aba(0);
    }
}

template <class T>
void CMaxHeap3<T>::reorg_arr(int indice)
{
    while (indice > 0) {
        int padre = (indice - 1) / 3;
        if (heap[padre] < heap[indice]) {
            std::swap(heap[padre], heap[indice]);
            indice = padre;
        } else {
            break;
        }
    }
}

template <class T>
void CMaxHeap3<T>::reorg_aba(int indice)
{
    int tamano = heap.size();
    int hijo = 3 * indice + 1; // Primer hijo

    while (hijo < tamano) {
        // Encuentra el hijo más grande
        int max_hijo = hijo;
        for (int i = 1; i <= 2; ++i) {
            if (hijo + i < tamano && heap[hijo + i] > heap[max_hijo]) {
                max_hijo = hijo + i;
            }
        }

        // Si el hijo más grande es más grande que el nodo actual, intercambiamos
        if (heap[max_hijo] > heap[indice]) {
            std::swap(heap[max_hijo], heap[indice]);
            indice = max_hijo;
            hijo = 3 * indice + 1;
        } else {
            break;
        }
    }
}

template <class T>
void CMaxHeap3<T>::print()
{
    for (auto i = heap.begin(); i != heap.end(); ++i) {
        std::cout << *i << " ";
    }
    std::cout << "\n";
}

int main()
{
    CMaxHeap3<int> h;
    std::vector<int> vpush = {30,35,40,50,43,36,60,51,70,90,66,77,23,21,49,88,73};
    for (auto i : vpush)
        h.push(i);
    h.print();
    for (int j = 0; j < 5; j++)
        h.pop();
    h.print();
}

